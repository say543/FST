============================
case do not work
==============================

04152020
case 1
# remove picture / pictures / from share file presentation because of UWP
#?  this two line does not work, not sure why
#define ShareFileFileDescription [FileDescription - {picture}];
#define ShareFileFileDescriptionPlural [FileDescriptionPl - {pictures}];
define ShareFileFileDescription [PropertyFileTypeIgnoreCase - {picture}];
define ShareFileFileDescriptionPlural [PropertyFileTypeIgnoreCase - {pictures}];

有什麼減法會減的不好

另外  
optimize net 
可能會讓原本work 的case 變成不work 因為optimize

// 上面換成下面  可能會比較好
//? 這個還要跟yue confirm
NLPFSTApplier --in=preprocess_output_0 --out=preprocess_output_1 --fst=files_enus_mv1.domain.pattern.preprocess.fst --mode=transducer 
NLPFSMApplier --in=preprocess_output_0 --out=preprocess_output_1 --fst=files_enus_mv1.domain.pattern.preprocess.fst --mode=transducer 



============================
onte note

'name'
Fst Manual Card
==============================
good turotial


================================
FST pattern matching file
pattern-matching-with-FST.pdf
有自己轉的pattern-matching-with-FST.docx

FST.morch.pdf
有自己轉的FST.morch.docx
can look up examples



================================
82/690
The boundary symbol .#. indicates the beginning of a
string in the left context and the 
end of a string in the right context. It has no special
meaning anywhere else.


189/660
Double-Vertical-Bar Rules The most commonly used form, the right-arrow,
double-vertical-bar rules, were introduced above in Section 3.5.2. You will recall
that these rules are based on the following template
A -> B || L _ R
where A, B, L and R are regular expressions, denoting languages (not relations),
and L and R are optional. The overall rule denotes a relation. The left context L
is extended by default on the left, and the right context R on the right, with ?*,
the universal language. The .#. notation may be used to override this default
and indicate the beginning and/or end of a word. These notational conventions will
hold for the other subtypes of replace rules to be presented.


define removeCarrierPhrase  empty <-@ [CarrierPhrase { } Cortana { } ] || .#. _ ;
只用到left , .#. 代表開頭


193/660
Longest Match Right-arrow, left-to-right, longest-match rules are built on the
following template
A @-> B || L _ R
preprocess rule 是最長的match
也有別的不同的matcgh



13/39
[all]
Table 1: predefined list 
是all words 所有的define 來源

13/39
graph 
是non white sapce symnbol


25/39
regex 的例子
也有apply

33/39
NLC, NRC

69/690
[A .o. B] denotes the composition of the relation A with the relation
B. If A contains the string pair x, y and B contains y, z , the
composite relation [A .o. B] contains the string pair x, z .
Composition is associative but not commutative. We can write


81/690
[A => L _ R] denotes the language of strings that have the property
that any string from A that occurs as a substring is immediately
preceded by some string from L and immediately followed by some
string from R. We call L and R here the LEFT and the RIGHT context of
A, respectively. For example, [a => b _ c] includes all strings that
contain no occurrence of “a” and all strings like “back-to-back”
that completely satisfy the condition, but no strings such as “cab” or
“pack”.

86/690
?  不懂...
[A -> B || L R]
Every replaced substring in the upper language is immediately preceded
by an upper-side string from L and immediately followed by an
upper-side string from R.
No license:


202/690
<-@  new operation?


72/690
? 不太3
Similarly, [a -> 0 || .#.] deletes only the final
a, but [a -> 0 \\ .#.] deletes all the as at the end of a word like “baa”.
See Section 3.5.5.


143/690
 N -> m || _ p ]
.o.
[ p -> m || m _ ] ;
Figure 3.14: A Regular Expression Denoting a Cascade of Rules. Rules in a
cascade are combined via the composition operation. The square brackets in
this example are not formally necessary.
xfst[0]: clear stack
xfst[0]: define Rule1 [ N -> m || _ p ] ;
xfst[0]: define Rule2 [ p -> m || m _ ] ;
xfst[0]: read regex Rule1 .o. Rule2 ;
Figure 3.15: A Cascade of Rules Implemented via Defined Variables and Composition

==================================================
FW: Weekly Shiproom - Core Science Bellevue

This forwarded email (see attached) might help with your “set scene <wildcard> in <location>” problem.

Mingzhu describes how to force “share file <wildcard> with <person>” to win over “share file <wildcard>”

====================================================

Context: I was looking at some DSATs and thinking about how to fix them with FST:


要討論的example
Share file specs with roger, in which we tagged “specs with roger” as file name.

If we have two rules: 
“share file <wildcard:filename>” and 
“share file < wildcard:filename> with <person>” 
how can we make sure that the second one is preferred? ?

Or if we have one rule with optional tokens: “share file <wildcard:filename> {with <person>}”, 
how can we prevent the greedy wildcard matching here?



conclusion
To the best of my knowledge, FST wildcard match is greedy matching (finding the longest one). We can double check FST‘s related document to sick some clue of conservative matching. 
Base on my knowledge, here is my input about the rules you mentioned.   Rule 1 will cover all the case about “share file *’, which is conflict with Rule 2, and as Rule1 is the longest match,  Rule 2  don’t have the chance to win.  



========================================
fst 跟QPCfile 不一樣的原因
========================================
BOS share the <file_title>lt review. pptx</file_title> file
BOS go to the <slide_name>marketing</slide_name> slide
BOS go to a <slide_name>marketing</slide_name> slide
BOS go to the <slide_name>cookie</slide_name> slide
BOS go to a <slide_name>cookie</slide_name> slide
BOS Go to the very <slide_number>last</slide_number> slide
BOS go to very <slide_number>last</slide_number> slide
BOS go to very last Slide
BOS Go to very last Slide
BOS Go to the marketing slide
BOS go to the marketing Slide
BOS Go to Main Functionality Slide
BOS Go to Main Functionality slide
BOS go to <slide_name>Main Functionality</slide_name> slide

可能的
in fst 因該是大小寫有差
in QPC 因該是大小寫沒有差

可能要qpc 為準....  如果覺得fst 沒有make sense



NRC, not right side
define TeamSpaceNavigateIntent {BOS} EndTag("teamspace_navigate") AND(RC(WS TeamSpaceNavigatePositivePattern), NRC(WS TeamSpaceNavigateNegativePattern));


========================
email thread
Re: Investigation on FST/FSM memory consumption
========================
3s memory consumption



========================
fst  for generic processing
'FST manual card'
one note page
========================
對generic processing 的code 有幫助
