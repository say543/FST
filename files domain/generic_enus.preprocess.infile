#===========================================
#  en-* pre-processor
#===========================================

#====================================
# Names for white-space characters
#====================================
define Space  " " ;              # space
define CR     "\r" ;             # carriage return
define NL     "\n" ;             # newline
define Tab    "\t" ;             # tab
define LB     CR | NL ;          # line break
define WS     Space | Tab | LB ; # whitespace

#====================================
#     Names for punctuation marks
#====================================
define Period        "." ;
define Ellipsis      "…" ; # \u2026
define ThreeDots     Ellipsis ;
define Comma         "," ;
define Colon         ":" ;
define Semicolon     ";" ;
define QMark         "?" ;
define Excl          "!" ;
define Hyphen        "-" ;
define Ampersand     "&" ;
define Plus          "+" ;
define PlusMinus     "±" ;
define MinusPlus     "∓" ;
define Atsign        "@" ;
define Tilde         "~" ;
define Equal         "=" ;
define Underscore    "_" ;
define Slash         "/" ;
define FractionSlash "⁄" ;  # \u2044
define DivisionSlash "∕" ;  # \u2215
define Slashes  Slash | FractionSlash | DivisionSlash ;
define Caret         "^" ;
define BackSlash     {\} ;
define BackQuote     "`" ;
define ReversePrime  "‵" ; # \u2035
define LGMET         "«" ;
define RGMET         "»" ;
define Apostrophe    "'" ;
define Prime         "′" ; # \u2032
define LSQ     	     "‘" ;
define RSQ     	     "’" ;
define DQ      	     %" ;
define RDQ     	     "”" ;
define DoublePrime   "″" ; # \u2033
define LDQ     	     "“" ;
define ReverseDoublePrime "‶" ; #\u2036
define LSQB          "[" ;
define RSQB 	     "]" ;
define LCB  	     "{" ;
define RCB  	     "}" ;
define LRB  	     "(" ;
define RRB  	     ")" ;
define RAB  	     ">" ;
define LAB  	     "<" ;
define VBAR 	     "|" ;
define Cent 	     "¢" ;
define Dollar 	     "$" ;
define Euro   	     "€" ;
define Pound  	     "£" ;
define Yen    	     "¥" ;
define Percent       "%" ;
define Star          "*" ;
define Hash          "#" ;
define InvertedQMark "¿" ;
define InvertedExcl  "¡" ;
define Registered    "®" ;
define Trademark     "™" ;
define Copyright     "©" ;
define Dagger        "†" ;
define Section       "§" ;
define Doubledagger  "‡" ;
define Bullet        "•" ; # \u2022
define Superscripts  ⁰ | ¹| ² | ³ | ⁴ | ⁵ | ⁶ | ⁷ | ⁸ | ⁹ | ⁿ  ;
define Subscripts    ₀ | ₁ | ₂ | ₃ | ₄ | ₅ | ₆ | ₇ | ₈ | ₉ ;
define Fractions     ¼ | ½ | ¾ ;
define Not			 "¬" ;
define Mult			 "×" ;
define Degree        "°" ;
define Nbsp          " " ;

#===========================================
# Query re-write rules
#===========================================

# carrier phrase "hey cortana"
define CarrierPhrase {hey} | {Hey} | {hi} | {Hi} | {ok} | {okay} ;
define Cortana {cortana} | {Cortana};
define removeCarrierPhrase  empty <-@ CarrierPhrase { } Cortana { } || .#. _ ;

# trimming
define trimStart empty <-@ WS+ || .#. _;
define trimEnd empty <-@ WS+ || _ .#.;
define normalizeWhitespace { } <-@ { }+;

# replace Nbsp with whitespace
define nbspToWhiteSpace { } <-@ Nbsp+; 

# replace ’s with 's
define RSQToApostrophe {'s} <-@ RSQ {s};

# stripping punctuation generated by SR
define stripEOSPunc empty <-@ {.} || _ .#. ;

# stripping double quote
define stripDoubleQuoteForWholeSentence [ empty <-@ DQ || .#. _  all+ ] .o. [ empty <-@ DQ || .#. all+ _ .#. ];

define ruleOfQueryReformulation  [
	Ins(removeCarrierPhrase) .o.
	Ins(trimStart) .o.
	Ins(trimEnd) .o.
	Ins(normalizeWhitespace) .o.
	Ins(nbspToWhiteSpace) .o.
	Ins(RSQToApostrophe) .o.
	Ins(stripEOSPunc) .o.
	Ins(stripDoubleQuoteForWholeSentence)
	];

#===========================================
# Tokenization rules
#===========================================

define Punctuation [ Period | Colon | SemiColon | QMark | Excl | Comma | Ellipsis ];
define tokenizePunctuation Tab ... <-@ Punctuation || ~% _ [ WS | .#. ];

define tokenizeQuestionMarkAtEndOfSentence Tab {?} <-@ {?} || _  .#. ;
######
# instead of tokenization, use stripping rule (stripEOSPunc)
# define tokenizeDotAtEndOfSentence Tab {.} <-@ {.} || _ .#. ;
######

define tokenizeComma Tab {,} <-@ {,} || ["A-Za-z" | digit] _;
define tokenizeAtSign [ Tab ... <-@ Atsign || ~% _ ] .o. [ ... Tab <-@ Atsign || _ ~% ];
# 3 @pm @cm 
#define tokenizeAtSign Tab ... <-@ Atsign || ~% _;
# 3@ pm@ cm
#define tokenizeAtSign ... Tab <-@ Atsign || _ ~% ;


# 5AM => 5 AM
# ? whying using [] instead of {}
define tokenizeTimeWithAmPm Tab ... <-@ [a|p|P|A] [m|M] || digit _;

# What's  =>  What 's , tab insert
define tokenizeApostropheWithS Tab {'s} <-@ {'s} || ["A-Za-z" | digit] _;

#What’s => What ’s , tab insert
define tokenizeClosingApostropheWithS Tab RSQ {s} <-@ RSQ {s} || ["A-Za-z" | digit] _;

#What‘s => What ‘s , tab insert
define tokenizeLeftApostropheWithS Tab LSQ <-@ LSQ || ["A-Za-z" | digit] _;

#What′s => What ′s , tab insert
define tokenizePrimeApostropheWithS Tab Prime <-@ Prime || ["A-Za-z" | digit] _;

# original
#abc.dec.        docx
##define tokenizeFileSearchOperatorForAllFileNames ... Tab <-@ {.} || [.#. | graph+] _ ["A-Za-z" | digit | {_} | {-} | {*}]+ [{ } | .#.];

#this is the same as original
#abc.dec.        docx
##define tokenizeFileSearchOperatorForAllFileNames [Tab ... <-@ {.} || [.#. | graph+] _ ["A-Za-z" | digit | {_} | {-} | {*}]+ [{ } | .#.]] .o. [ ... Tab <-@ {.} || [.#. | graph+] _ ["A-Za-z" | digit | {_} | {-} | {*}]+ [{ } | .#.] ];


# . to end  but two segment
#define tokenizeFileSearchOperatorForAllFileNames Tab ... <-@ {.} || [.#. | graph+] _ ["A-Za-z" | digit | {_} | {-} | {*}]+ [{ } | .#.];

#Tab.Tab
define tokenizeFileSearchOperatorForAllFileNames Tab ... Tab <-@ {.} || [.#. | graph+] _ ["A-Za-z" | digit | {_} | {-} | {*}]+ [{ } | .#.];



#.@
#define tokenizeFileSearchOperatorForAllFileNames ... Atsign <-@ {.} || [.#. | graph+] _ ["A-Za-z" | digit | {_} | {-} | {*}]+ [{ } | .#.];
#@.
#define tokenizeFileSearchOperatorForAllFileNames Atsign ... <-@ {.} || [.#. | graph+] _ ["A-Za-z" | digit | {_} | {-} | {*}]+ [{ } | .#.];



define OutlookOperator [ {ext:} | {from:} | {bcc:} | {cc:} | {hasattachment:} | {attachments:} | {subject:} | {messagesize:} | {received:} | {due:} | {followupflag:} | {hasflag:} | {read:} | {startdate:} | {is:} | {organizer:} | {category:} | {firstname:} | {lastname:} | {nickname:} | {jobtitle:} | {pager:} | [{home}|{business}] [{phone}|{address}|{fax}] {:} | {webpage:}];
define SharepointOperator [ {author:} | {date:} | {title:} | {startdate:} | {author:} ];
define tokenizeFileSearchOperatorWithExt ... Tab <-@ OutlookOperator || .#. _;

define UberProductX {x} |{black} | {suv} | {taxi} | {lux};
define tokenizeUberProductName Tab ... <-@ AnyCase(UberProductX) || [{uber}|{Uber}] _;

define tokenizeIWill Tab ... <-@ {'ll} || [{I}|{i}] _;

define ruleOfTokenization [
	Ins(tokenizeTimeWithAmPm) .o.
	Ins(tokenizeApostropheWithS) .o.
	Ins(tokenizeClosingApostropheWithS) .o.
	Ins(tokenizeLeftApostropheWithS) .o.
	Ins(tokenizePrimeApostropheWithS) .o.
	Ins(tokenizeFileSearchOperatorForAllFileNames)
#	Ins(tokenizeFileSearchOperatorForAllFileNames) .o.
#	Ins(tokenizeFileSearchOperatorForAllFileNames2)
#	Ins(tokenizeFileSearchOperatorForAllFileNames2) .o.
#	Ins(tokenizeFileSearchOperatorWithExt) .o.
#	Ins(tokenizeUberProductName) .o.
#	Ins(tokenizeAtSign) .o.
#	Ins(tokenizeComma) .o.
#	Ins(tokenizePunctuation) .o.
#	Ins(tokenizeQuestionMarkAtEndOfSentence) .o.
#	Ins(tokenizeIWill)
]; 

#===========================================
# All preprocessing rules
#===========================================

define PreprocessAll	[
	Ins(ruleOfQueryReformulation) .o.
	Ins(ruleOfTokenization)
];

clear
push PreprocessAll;

#===================
# Test cases
#===================
pmatch hey cortana remind me
pmatch okay cortana set up an alarm
pmatch hey cortana
pmatch Hey cortana weater in seattle
pmatch blah blah hey cortana remind me

pmatch what is weather?
pmatch start over.
pmatch mt. rainer
pmatch friday,september 9th
pmatch presentation1.pptx
pmatch which ones are open on saturday at 5pm
pmatch which ones are open on saturday at 5AM
pmatch which ones are open at 8PM Tomorrow
pmatch which ones are open on saturday at 5PM
pmatch which ones are open on saturday at 5pm
pmatch which ones are open on saturday at 5AM 
pmatch which ones are open on saturday at 5AM OK
pmatch which ones are open at 8PM Tomorrow
pmatch which ones are open on saturday at !am
pmatch Jane's Jane 's Jane@'s
pmatch What's the closest coffee place that is open now
pmatch What’s on my calendar tomorrow
pmatch What ’s on my calendar tomorrow
pmatch What′r on my calendar tomorrow
pmatch What‘r on my calendar tomorrow
pmatch What 's the closest coffee place that is open now
pmatch *.docx
pmatch *.docx*
pmatch *.DS_STORE
pmatch photo*.jpg
pmatch db.nop
pmatch ext:xlsx
pmatch from:abc
pmatch homeaddress:abc
pmatch what's up doc?
pmatch email john, scott, and alice
pmatch send email to john are you coming tomorrow?
pmatch find john's phone number
pmatch calendar appointment for ten thirty tomorrow
pmatch add to calendar Sunday February 8 @5:30 pm coach red game 
pmatch Hey Cortana send an email to Terry about tonight's after party.
pmatch Hey Cortana find slide decks on Windows 10 plans.
pmatch uberblack UberX uberSuV 
pmatch uber uber x
pmatch  find my
pmatch find   my
pmatch hello!!  
pmatch facebook.
pmatch facebook .
pmatch facebook..
pmatch ""commanders palace restaurant on washington ave""
pmatch commander ""palace restaurant on washington"" ave
pmatch i'll pay
pmatch non      breaking        space
pmatch John’s
pmatch abc.docx
# this case will be multiple segment
pmatch abc.dec.docx
pmatch abc_3.dec.docx
pmatch 3@pm@cm


#===================
# Generate a network
#===================
put property NAME LUQueryPreProcessing
optimize net
save for applier generic_enus.preprocess.fst

